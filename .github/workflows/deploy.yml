name: Deploy React Application to ECS

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"

      # Step 4: Extract version from package.json or similar
      - name: Extract version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 5: Build, tag, and push Docker image
      - name: Build and push Docker image to ECR
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/notez/notez_frontend"
          docker build -t "$IMAGE_URI:$VERSION" .
          docker tag "$IMAGE_URI:$VERSION" "$IMAGE_URI:latest"
          docker push "$IMAGE_URI:$VERSION"
          docker push "$IMAGE_URI:latest"

      # Step 6: Update ECS service to use the latest image
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster NotezFrontendCluster \
            --service NotezFrontendService \
            --force-new-deployment
            